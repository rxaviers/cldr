'use strict';

/*!
 * CLDR JavaScript Library v0.5.0 2018-09-12T19:19Z MIT license Â© Rafael Xavier
 * http://git.io/h4lmVg
 */

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('core-js/modules/web.dom.iterable');
require('core-js/modules/es6.array.iterator');
require('core-js/modules/es6.object.keys');
require('core-js/modules/es6.regexp.to-string');
require('core-js/modules/es6.regexp.split');
require('core-js/modules/es6.function.name');
require('core-js/modules/es6.regexp.replace');
require('core-js/modules/es6.regexp.constructor');
var Cldr = _interopDefault(require('@cldrjs/core'));
var EventEmitter = _interopDefault(require('wolfy87-eventemitter'));

function arrayForEach (array, callback) {
  var i, length;

  if (array.forEach) {
    return array.forEach(callback);
  }

  for (i = 0, length = array.length; i < length; i++) {
    callback(array[i], i, array);
  }
}

function objectKeys (object) {
  var i,
      result = [];

  if (Object.keys) {
    return Object.keys(object);
  }

  for (i in object) {
    result.push(i);
  }

  return result;
}

function createError (code, attributes) {
  var error, message;
  message = code + (attributes && JSON ? ": " + JSON.stringify(attributes) : "");
  error = new Error(message);
  error.code = code; // extend( error, attributes );

  arrayForEach(objectKeys(attributes), function (attribute) {
    error[attribute] = attributes[attribute];
  });
  return error;
}

function validate (code, check, attributes) {
  if (!check) {
    throw createError(code, attributes);
  }
}

function validatePresence (value, name) {
  validate("E_MISSING_PARAMETER", typeof value !== "undefined", {
    name: name
  });
}

function validateType (value, name, check, expected) {
  validate("E_INVALID_PAR_TYPE", check, {
    expected: expected,
    name: name,
    value: value
  });
}

function validateTypeFunction (value, name) {
  validateType(value, name, typeof value === "undefined" || typeof value === "function", "Function");
}

var arrayIsArray = Array.isArray || function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

function pathNormalize (path, attributes) {
  if (arrayIsArray(path)) {
    path = path.join("/");
  }

  if (typeof path !== "string") {
    throw new Error('invalid path "' + path + '"');
  } // 1: Ignore leading slash `/`
  // 2: Ignore leading `cldr/`


  path = path.replace(/^\//, "")
  /* 1 */
  .replace(/^cldr\//, "");
  /* 2 */
  // Replace {attribute}'s

  path = path.replace(/{[a-zA-Z]+}/g, function (name) {
    name = name.replace(/^{([^}]*)}$/, "$1");
    return attributes[name];
  });
  return path.split("/");
}

var superGet,
    superInit,
    globalEe = new EventEmitter();

function validateTypeEvent(value, name) {
  validateType(value, name, typeof value === "string" || value instanceof RegExp, "String or RegExp");
}

function validateThenCall(method, self) {
  return function (event, listener) {
    validatePresence(event, "event");
    validateTypeEvent(event, "event");
    validatePresence(listener, "listener");
    validateTypeFunction(listener, "listener");
    return self[method].apply(self, arguments);
  };
}

function off(self) {
  return validateThenCall("off", self);
}

function on(self) {
  return validateThenCall("on", self);
}

function once(self) {
  return validateThenCall("once", self);
}

Cldr.off = off(globalEe);
Cldr.on = on(globalEe);
Cldr.once = once(globalEe);
/**
 * Overload Cldr.prototype.init().
 */

superInit = Cldr.prototype.init;

Cldr.prototype.init = function () {
  var ee;
  this.ee = ee = new EventEmitter();
  this.off = off(ee);
  this.on = on(ee);
  this.once = once(ee);
  superInit.apply(this, arguments);
};
/**
 * getOverload is encapsulated, because of cldr/unresolved. If it's loaded
 * after cldr/event (and note it overwrites .get), it can trigger this
 * overload again.
 */


function getOverload() {
  /**
   * Overload Cldr.prototype.get().
   */
  superGet = Cldr.prototype.get;

  Cldr.prototype.get = function (path) {
    var value = superGet.apply(this, arguments);
    path = pathNormalize(path, this.attributes).join("/");
    globalEe.trigger("get", [path, value]);
    this.ee.trigger("get", [path, value]);
    return value;
  };
}

Cldr._eventInit = getOverload;
getOverload();

module.exports = Cldr;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
