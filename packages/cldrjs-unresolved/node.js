'use strict';

/*!
 * CLDR JavaScript Library v0.5.0 2018-09-12T19:20Z MIT license Â© Rafael Xavier
 * http://git.io/h4lmVg
 */

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Cldr = _interopDefault(require('@cldrjs/core'));

function arrayForEach (array, callback) {
  var i, length;

  if (array.forEach) {
    return array.forEach(callback);
  }

  for (i = 0, length = array.length; i < length; i++) {
    callback(array[i], i, array);
  }
}

function objectKeys (object) {
  var i,
      result = [];

  if (Object.keys) {
    return Object.keys(object);
  }

  for (i in object) {
    result.push(i);
  }

  return result;
}

function createError (code, attributes) {
  var error, message;
  message = code + (attributes && JSON ? ": " + JSON.stringify(attributes) : "");
  error = new Error(message);
  error.code = code; // extend( error, attributes );

  arrayForEach(objectKeys(attributes), function (attribute) {
    error[attribute] = attributes[attribute];
  });
  return error;
}

function validate (code, check, attributes) {
  if (!check) {
    throw createError(code, attributes);
  }
}

function validatePresence (value, name) {
  validate("E_MISSING_PARAMETER", typeof value !== "undefined", {
    name: name
  });
}

function validateType (value, name, check, expected) {
  validate("E_INVALID_PAR_TYPE", check, {
    expected: expected,
    name: name,
    value: value
  });
}

var arrayIsArray = Array.isArray || function (obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

function validateTypePath (value, name) {
  validateType(value, name, typeof value === "string" || arrayIsArray(value), "String or Array");
}

// @path: normalized path
function resourceGet (data, path) {
  var i,
      node = data,
      length = path.length;

  for (i = 0; i < length - 1; i++) {
    node = node[path[i]];

    if (!node) {
      return undefined;
    }
  }

  return node[path[i]];
}

/**
 * setAvailableBundles( Cldr, json )
 *
 * @Cldr [Cldr class]
 *
 * @json resolved/unresolved cldr data.
 *
 * Set available bundles queue based on passed json CLDR data. Considers a bundle as any String at /main/{bundle}.
 */

function coreSetAvailableBundles (Cldr$$1, json) {
  var bundle,
      availableBundleMapQueue = Cldr$$1._availableBundleMapQueue,
      main = resourceGet(json, ["main"]);

  if (main) {
    for (bundle in main) {
      if (main.hasOwnProperty(bundle) && bundle !== "root" && availableBundleMapQueue.indexOf(bundle) === -1) {
        availableBundleMapQueue.push(bundle);
      }
    }
  }
}

/**
 * Function inspired by jQuery Core, but reduced to our use case.
 */
function isPlainObject (obj) {
  return obj !== null && "" + obj === "[object Object]";
}

function validateTypePlainObject (value, name) {
  validateType(value, name, typeof value === "undefined" || isPlainObject(value), "Plain Object");
}

function alwaysArray (somethingOrArray) {
  return arrayIsArray(somethingOrArray) ? somethingOrArray : [somethingOrArray];
}

//
// Eg.
// merge( { a: { b: 1, c: 2 } }, { a: { b: 3, d: 4 } } )
// -> { a: { b: 3, c: 2, d: 4 } }
//
// @arguments JSON's
//

var merge = function merge() {
  var destination = {},
      sources = [].slice.call(arguments, 0);
  arrayForEach(sources, function (source) {
    var prop;

    for (prop in source) {
      if (prop in destination && typeof destination[prop] === "object" && !arrayIsArray(destination[prop])) {
        // Merge Objects
        destination[prop] = merge(destination[prop], source[prop]);
      } else {
        // Set new values
        destination[prop] = source[prop];
      }
    }
  });
  return destination;
};

/**
 * load( Cldr, source, jsons )
 *
 * @Cldr [Cldr class]
 *
 * @source [Object]
 *
 * @jsons [arguments]
 */

function coreLoad (Cldr$$1, source, jsons) {
  var i, j, json;
  validatePresence(jsons[0], "json"); // Support arbitrary parameters, e.g., `Cldr.load({...}, {...})`.

  for (i = 0; i < jsons.length; i++) {
    // Support array parameters, e.g., `Cldr.load([{...}, {...}])`.
    json = alwaysArray(jsons[i]);

    for (j = 0; j < json.length; j++) {
      validateTypePlainObject(json[j], "json");
      source = merge(source, json[j]);
      coreSetAvailableBundles(Cldr$$1, json[j]);
    }
  }

  return source;
}

function pathNormalize (path, attributes) {
  if (arrayIsArray(path)) {
    path = path.join("/");
  }

  if (typeof path !== "string") {
    throw new Error('invalid path "' + path + '"');
  } // 1: Ignore leading slash `/`
  // 2: Ignore leading `cldr/`


  path = path.replace(/^\//, "")
  /* 1 */
  .replace(/^cldr\//, "");
  /* 2 */
  // Replace {attribute}'s

  path = path.replace(/{[a-zA-Z]+}/g, function (name) {
    name = name.replace(/^{([^}]*)}$/, "$1");
    return attributes[name];
  });
  return path.split("/");
}

function bundleParentLookup (Cldr$$1, locale) {
  var normalizedPath, parent;

  if (locale === "root") {
    return;
  } // First, try to find parent on supplemental data.


  normalizedPath = pathNormalize(["supplemental/parentLocales/parentLocale", locale]);
  parent = resourceGet(Cldr$$1._resolved, normalizedPath) || resourceGet(Cldr$$1._raw, normalizedPath);

  if (parent) {
    return parent;
  } // Or truncate locale.


  parent = locale.substr(0, locale.lastIndexOf(Cldr$$1.localeSep));

  if (!parent) {
    return "root";
  }

  return parent;
}

// @path: normalized path
function resourceSet (data, path, value) {
  var i,
      node = data,
      length = path.length;

  for (i = 0; i < length - 1; i++) {
    if (!node[path[i]]) {
      node[path[i]] = {};
    }

    node = node[path[i]];
  }

  node[path[i]] = value;
}

var _lookup;

var itemLookup = _lookup = function lookup(Cldr$$1, locale, path, attributes, childLocale) {
  var normalizedPath, parent, value; // 1: Finish recursion
  // 2: Avoid infinite loop

  if (typeof locale === "undefined"
  /* 1 */
  || locale === childLocale
  /* 2 */
  ) {
      return;
    } // Resolve path


  normalizedPath = pathNormalize(path, attributes); // Check resolved (cached) data first
  // 1: Due to #16, never use the cached resolved non-leaf nodes. It may not
  //    represent its leafs in its entirety.

  value = resourceGet(Cldr$$1._resolved, normalizedPath);

  if (value !== undefined && typeof value !== "object"
  /* 1 */
  ) {
      return value;
    } // Check raw data


  value = resourceGet(Cldr$$1._raw, normalizedPath);

  if (value === undefined) {
    // Or, lookup at parent locale
    parent = bundleParentLookup(Cldr$$1, locale);
    value = _lookup(Cldr$$1, parent, path, merge(attributes, {
      bundle: parent
    }), locale);
  }

  if (value !== undefined) {
    // Set resolved (cached)
    resourceSet(Cldr$$1._resolved, normalizedPath, value);
  }

  return value;
};

Cldr._raw = {};
/**
 * Cldr.load( json [, json, ...] )
 *
 * @json [JSON] CLDR data or [Array] Array of @json's.
 *
 * Load resolved or unresolved cldr data.
 * Overwrite Cldr.load().
 */

Cldr.load = function () {
  Cldr._raw = coreLoad(Cldr, Cldr._raw, arguments);
};
/**
 * Overwrite Cldr.prototype.get().
 */


Cldr.prototype.get = function (path) {
  validatePresence(path, "path");
  validateTypePath(path, "path"); // 1: use bundle as locale on item lookup for simplification purposes, because no other extended subtag is used anyway on bundle parent lookup.
  // 2: during init(), this method is called, but bundle is yet not defined. Use "" as a workaround in this very specific scenario.

  return itemLookup(Cldr, this.attributes && this.attributes.bundle ||
  /* 1 */
  ""
  /* 2 */
  , path, this.attributes);
}; // In case cldr/unresolved is loaded after cldr/event, we trigger its overloads again. Because, .get is overwritten in here.


if (Cldr._eventInit) {
  Cldr._eventInit();
}

module.exports = Cldr;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
